{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCFloatingLabelFoundation } from '@material/floating-label/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCNotchedOutlineFoundation } from './foundation';\n\nvar MDCNotchedOutline =\n/** @class */\nfunction (_super) {\n  __extends(MDCNotchedOutline, _super);\n\n  function MDCNotchedOutline() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCNotchedOutline.attachTo = function (root) {\n    return new MDCNotchedOutline(root);\n  };\n\n  MDCNotchedOutline.prototype.initialSyncWithDOM = function () {\n    this.notchElement_ = this.root.querySelector(strings.NOTCH_ELEMENT_SELECTOR);\n    var label = this.root.querySelector('.' + MDCFloatingLabelFoundation.cssClasses.ROOT);\n\n    if (label) {\n      label.style.transitionDuration = '0s';\n      this.root.classList.add(cssClasses.OUTLINE_UPGRADED);\n      requestAnimationFrame(function () {\n        label.style.transitionDuration = '';\n      });\n    } else {\n      this.root.classList.add(cssClasses.NO_LABEL);\n    }\n  };\n  /**\n   * Updates classes and styles to open the notch to the specified width.\n   * @param notchWidth The notch width in the outline.\n   */\n\n\n  MDCNotchedOutline.prototype.notch = function (notchWidth) {\n    this.foundation.notch(notchWidth);\n  };\n  /**\n   * Updates classes and styles to close the notch.\n   */\n\n\n  MDCNotchedOutline.prototype.closeNotch = function () {\n    this.foundation.closeNotch();\n  };\n\n  MDCNotchedOutline.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root.classList.add(className);\n      },\n      removeClass: function (className) {\n        return _this.root.classList.remove(className);\n      },\n      setNotchWidthProperty: function (width) {\n        return _this.notchElement_.style.setProperty('width', width + 'px');\n      },\n      removeNotchWidthProperty: function () {\n        return _this.notchElement_.style.removeProperty('width');\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    return new MDCNotchedOutlineFoundation(adapter);\n  };\n\n  return MDCNotchedOutline;\n}(MDCComponent);\n\nexport { MDCNotchedOutline };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AAEH,SAAQ,YAAR,QAA2B,0BAA3B;AACA,SAAQ,0BAAR,QAAyC,qCAAzC;AAEA,SAAQ,UAAR,EAAoB,OAApB,QAAkC,aAAlC;AACA,SAAQ,2BAAR,QAA0C,cAA1C;;AAIA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;;AAAvC,WAAA,iBAAA,GAAA;;AAsDC;;AArDQ,EAAA,iBAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA6B;AAC3B,WAAO,IAAI,iBAAJ,CAAsB,IAAtB,CAAP;AACD,GAFM;;AAMP,EAAA,iBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AACE,SAAK,aAAL,GACI,KAAK,IAAL,CAAU,aAAV,CAAqC,OAAO,CAAC,sBAA7C,CADJ;AAGA,QAAM,KAAK,GAAG,KAAK,IAAL,CAAU,aAAV,CACV,MAAM,0BAA0B,CAAC,UAA3B,CAAsC,IADlC,CAAd;;AAEA,QAAI,KAAJ,EAAW;AACT,MAAA,KAAK,CAAC,KAAN,CAAY,kBAAZ,GAAiC,IAAjC;AACA,WAAK,IAAL,CAAU,SAAV,CAAoB,GAApB,CAAwB,UAAU,CAAC,gBAAnC;AACA,MAAA,qBAAqB,CAAC,YAAA;AACpB,QAAA,KAAK,CAAC,KAAN,CAAY,kBAAZ,GAAiC,EAAjC;AACD,OAFoB,CAArB;AAGD,KAND,MAMO;AACL,WAAK,IAAL,CAAU,SAAV,CAAoB,GAApB,CAAwB,UAAU,CAAC,QAAnC;AACD;AACF,GAfD;AAiBA;;;AAGG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,UAAN,EAAwB;AACtB,SAAK,UAAL,CAAgB,KAAhB,CAAsB,UAAtB;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;AACE,SAAK,UAAL,CAAgB,UAAhB;AACD,GAFD;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACE;AACA;AACA;;;AACA,QAAM,OAAO,GAA6B;AACxC,MAAA,QAAQ,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,GAApB,CAAA,SAAA,CAAA;AAAkC,OADnB;AAExC,MAAA,WAAW,EAAE,UAAC,SAAD,EAAU;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,SAAV,CAAoB,MAApB,CAAA,SAAA,CAAA;AAAqC,OAFzB;AAGxC,MAAA,qBAAqB,EAAE,UAAC,KAAD,EAAM;AACzB,eAAA,KAAI,CAAC,aAAL,CAAmB,KAAnB,CAAyB,WAAzB,CAAqC,OAArC,EAA8C,KAAK,GAAG,IAAtD,CAAA;AAA2D,OAJvB;AAKxC,MAAA,wBAAwB,EAAE,YAAA;AACtB,eAAA,KAAI,CAAC,aAAL,CAAmB,KAAnB,CAAyB,cAAzB,CAAwC,OAAxC,CAAA;AAAgD;AANZ,KAA1C,CAJF,CAYE;;AACA,WAAO,IAAI,2BAAJ,CAAgC,OAAhC,CAAP;AACD,GAdD;;AAeF,SAAA,iBAAA;AAAC,CAtDD,CAAuC,YAAvC,CAAA","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCFloatingLabelFoundation } from '@material/floating-label/foundation';\nimport { cssClasses, strings } from './constants';\nimport { MDCNotchedOutlineFoundation } from './foundation';\nvar MDCNotchedOutline = /** @class */ (function (_super) {\n    __extends(MDCNotchedOutline, _super);\n    function MDCNotchedOutline() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCNotchedOutline.attachTo = function (root) {\n        return new MDCNotchedOutline(root);\n    };\n    MDCNotchedOutline.prototype.initialSyncWithDOM = function () {\n        this.notchElement_ =\n            this.root.querySelector(strings.NOTCH_ELEMENT_SELECTOR);\n        var label = this.root.querySelector('.' + MDCFloatingLabelFoundation.cssClasses.ROOT);\n        if (label) {\n            label.style.transitionDuration = '0s';\n            this.root.classList.add(cssClasses.OUTLINE_UPGRADED);\n            requestAnimationFrame(function () {\n                label.style.transitionDuration = '';\n            });\n        }\n        else {\n            this.root.classList.add(cssClasses.NO_LABEL);\n        }\n    };\n    /**\n     * Updates classes and styles to open the notch to the specified width.\n     * @param notchWidth The notch width in the outline.\n     */\n    MDCNotchedOutline.prototype.notch = function (notchWidth) {\n        this.foundation.notch(notchWidth);\n    };\n    /**\n     * Updates classes and styles to close the notch.\n     */\n    MDCNotchedOutline.prototype.closeNotch = function () {\n        this.foundation.closeNotch();\n    };\n    MDCNotchedOutline.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            addClass: function (className) { return _this.root.classList.add(className); },\n            removeClass: function (className) { return _this.root.classList.remove(className); },\n            setNotchWidthProperty: function (width) {\n                return _this.notchElement_.style.setProperty('width', width + 'px');\n            },\n            removeNotchWidthProperty: function () {\n                return _this.notchElement_.style.removeProperty('width');\n            },\n        };\n        // tslint:enable:object-literal-sort-keys\n        return new MDCNotchedOutlineFoundation(adapter);\n    };\n    return MDCNotchedOutline;\n}(MDCComponent));\nexport { MDCNotchedOutline };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}