{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCTextFieldIconFoundation } from './foundation';\n\nvar MDCTextFieldIcon =\n/** @class */\nfunction (_super) {\n  __extends(MDCTextFieldIcon, _super);\n\n  function MDCTextFieldIcon() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCTextFieldIcon.attachTo = function (root) {\n    return new MDCTextFieldIcon(root);\n  };\n\n  Object.defineProperty(MDCTextFieldIcon.prototype, \"foundationForTextField\", {\n    // Provided for access by MDCTextField component\n    get: function () {\n      return this.foundation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCTextFieldIcon.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n    // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n\n\n    var adapter = {\n      getAttr: function (attr) {\n        return _this.root.getAttribute(attr);\n      },\n      setAttr: function (attr, value) {\n        return _this.root.setAttribute(attr, value);\n      },\n      removeAttr: function (attr) {\n        return _this.root.removeAttribute(attr);\n      },\n      setContent: function (content) {\n        _this.root.textContent = content;\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        return _this.listen(evtType, handler);\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        return _this.unlisten(evtType, handler);\n      },\n      notifyIconAction: function () {\n        return _this.emit(MDCTextFieldIconFoundation.strings.ICON_EVENT, {}\n        /* evtData */\n        , true\n        /* shouldBubble */\n        );\n      }\n    }; // tslint:enable:object-literal-sort-keys\n\n    return new MDCTextFieldIconFoundation(adapter);\n  };\n\n  return MDCTextFieldIcon;\n}(MDCComponent);\n\nexport { MDCTextFieldIcon };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAqBG;;AAEH,SAAQ,YAAR,QAA2B,0BAA3B;AAEA,SAAQ,0BAAR,QAAyC,cAAzC;;AAIA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAsC,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;AAAtC,WAAA,gBAAA,GAAA;;AA6BC;;AA5BQ,EAAA,gBAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA6B;AAC3B,WAAO,IAAI,gBAAJ,CAAqB,IAArB,CAAP;AACD,GAFM;;AAKP,EAAA,MAAA,CAAA,cAAA,CAAI,gBAAA,CAAA,SAAJ,EAAI,wBAAJ,EAA0B;AAD1B;SACA,YAAA;AACE,aAAO,KAAK,UAAZ;AACD,KAFyB;qBAAA;;AAAA,GAA1B;;AAIA,EAAA,gBAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACE;AACA;AACA;;;AACA,QAAM,OAAO,GAA4B;AACvC,MAAA,OAAO,EAAE,UAAC,IAAD,EAAK;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,YAAV,CAAA,IAAA,CAAA;AAA4B,OADR;AAEvC,MAAA,OAAO,EAAE,UAAC,IAAD,EAAO,KAAP,EAAY;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,YAAV,CAAuB,IAAvB,EAAA,KAAA,CAAA;AAAmC,OAFtB;AAGvC,MAAA,UAAU,EAAE,UAAC,IAAD,EAAK;AAAK,eAAA,KAAI,CAAC,IAAL,CAAU,eAAV,CAAA,IAAA,CAAA;AAA+B,OAHd;AAIvC,MAAA,UAAU,EAAE,UAAC,OAAD,EAAQ;AAClB,QAAA,KAAI,CAAC,IAAL,CAAU,WAAV,GAAwB,OAAxB;AACD,OANsC;AAOvC,MAAA,0BAA0B,EAAE,UAAC,OAAD,EAAU,OAAV,EAAiB;AAAK,eAAA,KAAI,CAAC,MAAL,CAAY,OAAZ,EAAA,OAAA,CAAA;AAA6B,OAPxC;AAQvC,MAAA,4BAA4B,EAAE,UAAC,OAAD,EAAU,OAAV,EAAiB;AAAK,eAAA,KAAI,CAAC,QAAL,CAAc,OAAd,EAAA,OAAA,CAAA;AAA+B,OAR5C;AASvC,MAAA,gBAAgB,EAAE,YAAA;AAAM,eAAA,KAAI,CAAC,IAAL,CACpB,0BAA0B,CAAC,OAA3B,CAAmC,UADf,EAC2B;AAAG;AAD9B,UAC6C;AAD7C;AAAA,SAAA;AACqE;AAVtD,KAAzC,CAJF,CAgBE;;AACA,WAAO,IAAI,0BAAJ,CAA+B,OAA/B,CAAP;AACD,GAlBD;;AAmBF,SAAA,gBAAA;AAAC,CA7BD,CAAsC,YAAtC,CAAA","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCTextFieldIconFoundation } from './foundation';\nvar MDCTextFieldIcon = /** @class */ (function (_super) {\n    __extends(MDCTextFieldIcon, _super);\n    function MDCTextFieldIcon() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCTextFieldIcon.attachTo = function (root) {\n        return new MDCTextFieldIcon(root);\n    };\n    Object.defineProperty(MDCTextFieldIcon.prototype, \"foundationForTextField\", {\n        // Provided for access by MDCTextField component\n        get: function () {\n            return this.foundation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCTextFieldIcon.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n        var adapter = {\n            getAttr: function (attr) { return _this.root.getAttribute(attr); },\n            setAttr: function (attr, value) { return _this.root.setAttribute(attr, value); },\n            removeAttr: function (attr) { return _this.root.removeAttribute(attr); },\n            setContent: function (content) {\n                _this.root.textContent = content;\n            },\n            registerInteractionHandler: function (evtType, handler) { return _this.listen(evtType, handler); },\n            deregisterInteractionHandler: function (evtType, handler) { return _this.unlisten(evtType, handler); },\n            notifyIconAction: function () { return _this.emit(MDCTextFieldIconFoundation.strings.ICON_EVENT, {} /* evtData */, true /* shouldBubble */); },\n        };\n        // tslint:enable:object-literal-sort-keys\n        return new MDCTextFieldIconFoundation(adapter);\n    };\n    return MDCTextFieldIcon;\n}(MDCComponent));\nexport { MDCTextFieldIcon };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}