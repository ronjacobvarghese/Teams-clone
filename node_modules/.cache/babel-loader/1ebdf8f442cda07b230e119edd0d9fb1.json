{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar INTERACTION_EVENTS = ['click', 'keydown'];\n\nvar MDCTextFieldIconFoundation =\n/** @class */\nfunction (_super) {\n  __extends(MDCTextFieldIconFoundation, _super);\n\n  function MDCTextFieldIconFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCTextFieldIconFoundation.defaultAdapter), adapter)) || this;\n\n    _this.savedTabIndex_ = null;\n\n    _this.interactionHandler_ = function (evt) {\n      return _this.handleInteraction(evt);\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(MDCTextFieldIconFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldIconFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCTextFieldIconFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCTextFieldIconAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        getAttr: function () {\n          return null;\n        },\n        setAttr: function () {\n          return undefined;\n        },\n        removeAttr: function () {\n          return undefined;\n        },\n        setContent: function () {\n          return undefined;\n        },\n        registerInteractionHandler: function () {\n          return undefined;\n        },\n        deregisterInteractionHandler: function () {\n          return undefined;\n        },\n        notifyIconAction: function () {\n          return undefined;\n        }\n      }; // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  MDCTextFieldIconFoundation.prototype.init = function () {\n    var _this = this;\n\n    this.savedTabIndex_ = this.adapter.getAttr('tabindex');\n    INTERACTION_EVENTS.forEach(function (evtType) {\n      _this.adapter.registerInteractionHandler(evtType, _this.interactionHandler_);\n    });\n  };\n\n  MDCTextFieldIconFoundation.prototype.destroy = function () {\n    var _this = this;\n\n    INTERACTION_EVENTS.forEach(function (evtType) {\n      _this.adapter.deregisterInteractionHandler(evtType, _this.interactionHandler_);\n    });\n  };\n\n  MDCTextFieldIconFoundation.prototype.setDisabled = function (disabled) {\n    if (!this.savedTabIndex_) {\n      return;\n    }\n\n    if (disabled) {\n      this.adapter.setAttr('tabindex', '-1');\n      this.adapter.removeAttr('role');\n    } else {\n      this.adapter.setAttr('tabindex', this.savedTabIndex_);\n      this.adapter.setAttr('role', strings.ICON_ROLE);\n    }\n  };\n\n  MDCTextFieldIconFoundation.prototype.setAriaLabel = function (label) {\n    this.adapter.setAttr('aria-label', label);\n  };\n\n  MDCTextFieldIconFoundation.prototype.setContent = function (content) {\n    this.adapter.setContent(content);\n  };\n\n  MDCTextFieldIconFoundation.prototype.handleInteraction = function (evt) {\n    var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;\n\n    if (evt.type === 'click' || isEnterKey) {\n      evt.preventDefault(); // stop click from causing host label to focus\n      // input\n\n      this.adapter.notifyIconAction();\n    }\n  };\n\n  return MDCTextFieldIconFoundation;\n}(MDCFoundation);\n\nexport { MDCTextFieldIconFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCTextFieldIconFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar INTERACTION_EVENTS = ['click', 'keydown'];\nvar MDCTextFieldIconFoundation = /** @class */ (function (_super) {\n    __extends(MDCTextFieldIconFoundation, _super);\n    function MDCTextFieldIconFoundation(adapter) {\n        var _this = _super.call(this, __assign(__assign({}, MDCTextFieldIconFoundation.defaultAdapter), adapter)) || this;\n        _this.savedTabIndex_ = null;\n        _this.interactionHandler_ = function (evt) { return _this.handleInteraction(evt); };\n        return _this;\n    }\n    Object.defineProperty(MDCTextFieldIconFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextFieldIconFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MDCTextFieldIconFoundation, \"defaultAdapter\", {\n        /**\n         * See {@link MDCTextFieldIconAdapter} for typing information on parameters and return types.\n         */\n        get: function () {\n            // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n            return {\n                getAttr: function () { return null; },\n                setAttr: function () { return undefined; },\n                removeAttr: function () { return undefined; },\n                setContent: function () { return undefined; },\n                registerInteractionHandler: function () { return undefined; },\n                deregisterInteractionHandler: function () { return undefined; },\n                notifyIconAction: function () { return undefined; },\n            };\n            // tslint:enable:object-literal-sort-keys\n        },\n        enumerable: false,\n        configurable: true\n    });\n    MDCTextFieldIconFoundation.prototype.init = function () {\n        var _this = this;\n        this.savedTabIndex_ = this.adapter.getAttr('tabindex');\n        INTERACTION_EVENTS.forEach(function (evtType) {\n            _this.adapter.registerInteractionHandler(evtType, _this.interactionHandler_);\n        });\n    };\n    MDCTextFieldIconFoundation.prototype.destroy = function () {\n        var _this = this;\n        INTERACTION_EVENTS.forEach(function (evtType) {\n            _this.adapter.deregisterInteractionHandler(evtType, _this.interactionHandler_);\n        });\n    };\n    MDCTextFieldIconFoundation.prototype.setDisabled = function (disabled) {\n        if (!this.savedTabIndex_) {\n            return;\n        }\n        if (disabled) {\n            this.adapter.setAttr('tabindex', '-1');\n            this.adapter.removeAttr('role');\n        }\n        else {\n            this.adapter.setAttr('tabindex', this.savedTabIndex_);\n            this.adapter.setAttr('role', strings.ICON_ROLE);\n        }\n    };\n    MDCTextFieldIconFoundation.prototype.setAriaLabel = function (label) {\n        this.adapter.setAttr('aria-label', label);\n    };\n    MDCTextFieldIconFoundation.prototype.setContent = function (content) {\n        this.adapter.setContent(content);\n    };\n    MDCTextFieldIconFoundation.prototype.handleInteraction = function (evt) {\n        var isEnterKey = evt.key === 'Enter' || evt.keyCode === 13;\n        if (evt.type === 'click' || isEnterKey) {\n            evt.preventDefault(); // stop click from causing host label to focus\n            // input\n            this.adapter.notifyIconAction();\n        }\n    };\n    return MDCTextFieldIconFoundation;\n}(MDCFoundation));\nexport { MDCTextFieldIconFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCTextFieldIconFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}